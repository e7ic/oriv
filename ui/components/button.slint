import { VerticalBox, HorizontalBox } from "std-widgets.slint";

export enum ButtonType {
    primary,
    default,
    dashed,
    text,
    link,
}

export enum ButtonSize {
    small,
    medium,
    large,
}

export enum ButtonShape {
    default,
    round,
    circle,
}

export component Button inherits Rectangle {
    // 按钮类型和尺寸
    in-out property <ButtonType> button-type: ButtonType.default;
    in-out property <ButtonSize> size: ButtonSize.medium;
    in-out property <ButtonShape> shape: ButtonShape.default;

    // 按钮内容
    in-out property <string> text: "";
    in-out property <image> icon;

    // 状态属性
    in-out property <bool> disabled: false;
    in-out property <bool> danger: false;
    in-out property <bool> block: false;

    // 主题相关
    in-out property <bool> dark-mode: false;

    // 尺寸配置
    property <length> button-height: size == ButtonSize.small ? 24px :
                                     (size == ButtonSize.large ? 40px : 32px);
    property <length> font-size-value: size == ButtonSize.small ? 12px :
                                       (size == ButtonSize.large ? 16px : 14px);
    property <length> padding-h: size == ButtonSize.small ? 12px :
                                (size == ButtonSize.large ? 16px : 15px);
    property <length> icon-size: size == ButtonSize.small ? 14px :
                                (size == ButtonSize.large ? 18px : 16px);

    // 圆角配置
    property <length> radius: shape == ButtonShape.circle ? button-height / 2 :
                             (shape == ButtonShape.round ? button-height / 2 :
                             (size == ButtonSize.large ? 8px : 6px));

    // 回调函数
    callback clicked();

    height: button-height;

    // 主容器
    container := Rectangle {
        width: 100%;
        height: 100%;
        border-radius: root.radius;

        // 背景色
        background: {
            if root.disabled {
                if root.button-type == ButtonType.primary {
                    root.dark-mode ? #1f1f1f : #f5f5f5
                } else if root.button-type == ButtonType.text || root.button-type == ButtonType.link {
                    transparent
                } else {
                    root.dark-mode ? #1f1f1f : #f5f5f5
                }
            } else if root.button-type == ButtonType.primary {
                if touch-area.pressed {
                    root.danger ? #d9363e : #096dd9
                } else if touch-area.has-hover {
                    root.danger ? #ff7875 : #40a9ff
                } else {
                    root.danger ? #ff4d4f : #1890ff
                }
            } else if root.button-type == ButtonType.text || root.button-type == ButtonType.link {
                if touch-area.has-hover && !root.disabled {
                    root.danger ? rgba(255, 77, 79, 0.06) : rgba(0, 0, 0, 0.06)
                } else {
                    transparent
                }
            } else {
                if touch-area.pressed && !root.disabled {
                    root.dark-mode ? #333333 : #f0f0f0
                } else if touch-area.has-hover && !root.disabled {
                    root.dark-mode ? #2a2a2a : #fafafa
                } else {
                    root.dark-mode ? #1f1f1f : white
                }
            }
        };

        // 边框
        border-width: {
            if root.button-type == ButtonType.dashed || root.button-type == ButtonType.default {
                1px
            } else {
                0px
            }
        };

        border-color: {
            if root.disabled {
                if root.button-type == ButtonType.dashed || root.button-type == ButtonType.default {
                    root.dark-mode ? #2a2a2a : #d9d9d9
                } else {
                    transparent
                }
            } else if root.button-type == ButtonType.dashed || root.button-type == ButtonType.default {
                if touch-area.has-hover {
                    root.danger ? #ff7875 : #40a9ff
                } else {
                    root.danger ? #ff4d4f : (root.dark-mode ? #434343 : #d9d9d9)
                }
            } else {
                transparent
            }
        };

        animate background { duration: 200ms; easing: ease-in-out; }
        animate border-color { duration: 200ms; easing: ease-in-out; }

        // 内容布局
        HorizontalLayout {
            padding-left: root.text == "" ? 0px : root.padding-h;
            padding-right: root.text == "" ? 0px : root.padding-h;
            spacing: root.text != "" && root.icon.width > 0 ? 8px : 0px;
            alignment: LayoutAlignment.center;

            // 图标
            if root.icon.width > 0: Image {
                source: root.icon;
                width: root.icon-size;
                height: root.icon-size;
                colorize: {
                    if root.disabled {
                        root.dark-mode ? #595959 : rgba(0, 0, 0, 0.25)
                    } else if root.button-type == ButtonType.primary {
                        white
                    } else if root.button-type == ButtonType.text || root.button-type == ButtonType.link {
                        if touch-area.pressed {
                            root.danger ? #d9363e : #096dd9
                        } else if touch-area.has-hover {
                            root.danger ? #ff7875 : #40a9ff
                        } else {
                            root.danger ? #ff4d4f : #1890ff
                        }
                    } else {
                        root.danger ? #ff4d4f : (root.dark-mode ? #e0e0e0 : rgba(0, 0, 0, 0.88))
                    }
                };
            }

            // 文本
            if root.text != "": Text {
                text: root.text;
                font-size: root.font-size-value;
                vertical-alignment: center;
                horizontal-alignment: center;
                color: {
                    if root.disabled {
                        root.dark-mode ? #595959 : rgba(0, 0, 0, 0.25)
                    } else if root.button-type == ButtonType.primary {
                        white
                    } else if root.button-type == ButtonType.text || root.button-type == ButtonType.link {
                        if touch-area.pressed {
                            root.danger ? #d9363e : #096dd9
                        } else if touch-area.has-hover {
                            root.danger ? #ff7875 : #40a9ff
                        } else {
                            root.danger ? #ff4d4f : #1890ff
                        }
                    } else {
                        root.danger ? #ff4d4f : (root.dark-mode ? #e0e0e0 : rgba(0, 0, 0, 0.88))
                    }
                };
            }
        }

        // Link 按钮的下划线
        if root.button-type == ButtonType.link && touch-area.has-hover && !root.disabled: Rectangle {
            y: parent.height - 1px;
            height: 1px;
            width: parent.width - root.padding-h * 2;
            x: root.padding-h;
            background: root.danger ? #ff4d4f : #1890ff;
        }

        // 触摸区域
        touch-area := TouchArea {
            width: 100%;
            height: 100%;

            clicked => {
                if (!root.disabled) {
                    root.clicked();
                }
            }
        }
    }
}

// 图标按钮（便捷组件）
export component IconButton inherits Button {
    shape: ButtonShape.circle;
}
