import { VerticalBox, HorizontalBox } from "std-widgets.slint";

export enum InputSize {
    small,
    medium,
    large,
}

export enum InputStatus {
    normal,
    error,
    warning,
}

export component Input inherits Rectangle {
    // 尺寸属性
    in-out property <InputSize> size: InputSize.medium;

    // 输入框内容
    in-out property <string> text <=> text-input.text;
    in-out property <string> placeholder: "";

    // 状态属性
    in-out property <bool> disabled: false;
    in-out property <bool> readonly: false;
    in-out property <InputStatus> status: InputStatus.normal;

    // 主题相关
    in-out property <bool> dark-mode: false;

    // 自定义样式属性
    in-out property <color> bg-color: dark-mode ? #2a2a2a : #f5f5f5;
    in-out property <color> hover-bg-color: dark-mode ? #333333 : #ebebeb;
    in-out property <color> focus-bg-color: dark-mode ? #2d2d2d : #f0f0f0;
    in-out property <color> disabled-bg-color: dark-mode ? #1a1a1a : #f9f9f9;
    in-out property <color> text-color: dark-mode ? #e0e0e0 : #333333;
    in-out property <color> placeholder-color: dark-mode ? #666666 : #999999;
    in-out property <color> disabled-text-color: dark-mode ? #555555 : #cccccc;
    in-out property <color> input-border-color: transparent;
    in-out property <color> focus-border-color: dark-mode ? #4096ff : #1890ff;
    in-out property <color> error-border-color: #ff4d4f;
    in-out property <color> warning-border-color: #faad14;

    // 尺寸配置
    property <length> input-height: size == InputSize.small ? 28px :
                                   (size == InputSize.large ? 40px : 32px);
    property <length> font-size-value: size == InputSize.small ? 12px :
                                      (size == InputSize.large ? 16px : 14px);
    property <length> padding-horizontal: size == InputSize.small ? 8px :
                                         (size == InputSize.large ? 14px : 11px);
    property <length> padding-vertical: size == InputSize.small ? 4px :
                                       (size == InputSize.large ? 8px : 6px);

    // 内部状态
    property <bool> is-focused: text-input.has-focus;
    property <bool> is-hovered: touch-area.has-hover;

    // 计算当前背景色
    property <color> current-bg: disabled ? disabled-bg-color :
                                (is-focused ? focus-bg-color :
                                (is-hovered ? hover-bg-color : bg-color));

    // 计算当前底部边框色
    property <color> current-border: disabled ? transparent :
                                    (status == InputStatus.error ? error-border-color :
                                    (status == InputStatus.warning ? warning-border-color :
                                    (is-focused ? focus-border-color : input-border-color)));

    // 回调函数
    callback accepted(string);
    callback edited(string);

    width: 100%;
    height: input-height;

    // 主容器
    container := Rectangle {
        width: 100%;
        height: 100%;
        background: current-bg;
        border-radius: 6px;
        border-width: is-focused || status != InputStatus.normal ? 1px : 0px;
        border-color: current-border;

        // 动画效果
        animate background { duration: 150ms; easing: ease-in-out; }
        animate border-width { duration: 150ms; easing: ease-out; }
        animate border-color { duration: 150ms; easing: ease-in-out; }

        // 内容布局
        HorizontalLayout {
            padding-left: padding-horizontal;
            padding-right: padding-horizontal;
            padding-top: padding-vertical;
            padding-bottom: padding-vertical;
            spacing: 4px;

            // 文本输入区域
            text-input := TextInput {
                enabled: !root.disabled && !root.readonly;
                color: root.disabled ? disabled-text-color : text-color;
                font-size: font-size-value;
                vertical-alignment: center;
                horizontal-alignment: left;
                single-line: true;

                accepted => {
                    root.accepted(self.text);
                }

                edited => {
                    root.edited(self.text);
                }
            }

            // Placeholder 文本
            if text-input.text == "" && !is-focused: Text {
                text: root.placeholder;
                color: placeholder-color;
                font-size: font-size-value;
                vertical-alignment: center;
                horizontal-alignment: left;
            }
        }

        // 触摸区域
        touch-area := TouchArea {
            width: 100%;
            height: 100%;

            clicked => {
                if (!root.disabled && !root.readonly) {
                    text-input.focus();
                }
            }
        }
    }
}

// 带标签的输入框组件
export component LabeledInput inherits VerticalLayout {
    // 标签属性
    in-out property <string> label: "";
    in-out property <bool> required: false;

    // Input 属性（透传）
    in-out property <string> text <=> input.text;
    in-out property <string> placeholder <=> input.placeholder;
    in-out property <bool> disabled <=> input.disabled;
    in-out property <bool> readonly <=> input.readonly;
    in-out property <InputStatus> status <=> input.status;
    in-out property <InputSize> size <=> input.size;
    in-out property <bool> dark-mode: false;

    // 样式属性
    in-out property <color> label-color: dark-mode ? #e0e0e0 : #333333;
    in-out property <color> required-color: #ff4d4f;

    // 回调函数（透传）
    callback accepted <=> input.accepted;
    callback edited <=> input.edited;

    spacing: 8px;

    // 标签区域
    if label != "": HorizontalLayout {
        spacing: 4px;
        height: 20px;

        Text {
            text: root.label;
            color: label-color;
            font-size: 14px;
            vertical-alignment: center;
        }

        if required: Text {
            text: "*";
            color: required-color;
            font-size: 14px;
            vertical-alignment: center;
        }
    }

    // 输入框
    input := Input {
        dark-mode: root.dark-mode;
    }
}
